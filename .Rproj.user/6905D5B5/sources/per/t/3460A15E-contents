

##############################
## covariates nowcast model ##
##############################

###-----------------------------------------------------------------------------------------------------------------
## extracted covar

## predict some of the extracted covariates with simple model
#all covariates extracted in the first round on the 22.04.2020
covar_now <- read.csv('data/covars/GDL_extract_2020_04_22.csv')

#additional covar extracted on the 29.04.2020
livestock <- read.csv('data/covars/GDL_livestock_2020_04_29.csv')
malaria <- read.csv('data/covars/GDL_malaria_2020_04_29.csv')
#spei <- read.csv('data/covars/GDL_spei_2020_04_29.csv')


#manipulation
covar_now$GDLCode <- substr(covar_now$GDLCode, 42, 100)
covar_now <- reshape2::dcast(covar_now, GDLCode + year ~ variable)
covar_now <- covar_now %>% dplyr::select(-c(bodycount, nutritiondiversity))

#livestock
colnames(livestock) <- c("GDLCode", "buffaloes", "cattle", "chickens", "ducks", "horses", "pigs", "sheep")
covar_now <- merge(covar_now, livestock, by = "GDLCode", all.x=T, all.y=F)

#malaria
malaria <- malaria %>% rename(mal_falciparum = "falciparum", mal_vivax = "vivax")
covar_now <- merge(covar_now, malaria, by = c("GDLCode", "year"), all.x=T, all.y=F)

# #Dont deal with SPEI right now
# #spei
# spei$year <- year(ymd(gsub('X', '', spei$date)))
# spei$month <- month(ymd(gsub('X', '', spei$date)))
# spei <- spei %>% select(-c(date))
# 
# covar_now <- data.frame(covar_now[rep(1:nrow(covar_now), 12), ], month = rep(1:12, each = nrow(covar_now)))
# covar_now <- merge(covar_now, spei, by = c("GDLCode", "year", "month"), all.x=T, all.y=F)

covar_now <- covar_now %>% 
	rename(GDLCODE = "GDLCode") %>%
	mutate(iso3 = substr(GDLCODE, 1, 3))

#Places with missing malaria data just have no malaria
covar_now$mal_falciparum[is.na(covar_now$mal_falciparum)] <- 0
covar_now$mal_vivax[is.na(covar_now$mal_vivax)] <- 0

#For missing data first pad NAs with most recent available year
covar_now <- covar_now %>% 
		#Make NANs NA
		#Fill in missing years with nearest chronological year
		arrange(GDLCODE, year) %>%
		group_by(GDLCODE) %>%
		mutate_each(funs(na.locf(na.locf(., na.rm=F), na.rm=F, fromLast=T))) %>%
		group_by(iso3, year) %>%
		mutate_each(funs(replace(., which(is.na(.)), mean(., na.rm=TRUE))))

#countrycode(covar_now$iso3[apply(covar_now, MARGIN=1, FUN=function(x){any(is.na(x))})] %>% unique, 'iso3c', 'country.name')
#All other missing data is islands or North Latitudes


###############################
## covariates forecast model ##
###############################

###-----------------------------------------------------------------------------------------------------------------
## Gini, HDI

#install.packages("openxlsx")
library(openxlsx)

#gini
gini <- read.xlsx("data/covars/Gini_projections_SSPs.xlsx", sheet = "projected_ginis_full-set")

gini <- gini %>% 
  filter(scenario == "SSP2", year %in% 2011:2032) %>% 
  select(-scenario)

gini <- reshape2::melt(gini, id.vars = "year")

gini <- gini %>% 
  rename(iso3 = "variable", gini = "value") %>%
  mutate(gini = gini/100, iso3 = as.character(iso3))

#hdi
hdi <- read.xlsx("data/covars/HDI-SSPs.xlsx", sheet = "Tabelle1")

hdi$iso3 <- countrycode(gsub(' - \\d+','', hdi$obs), origin = "country.name", destination = "iso3c")
hdi$year <- as.numeric(paste0("20", gsub('\\D','', hdi$obs)))

hdi <- hdi %>% 
  rename(hdi = "HDI_SSP2") %>%
  select(year, iso3, hdi) %>%
  filter(year %in% c(2010, 2015, 2020, 2025, 2030, 2035))

#approax the years in between
hdi <- data.table(hdi)
hdi <- rbind(hdi, hdi[, .(year = setdiff(2010:2035, c(2010, 2015, 2020, 2025, 2030, 2035)), hdi = NA), by = .(iso3)])
hdi <- hdi[order(year), .SD, by = iso3]

hdi[, hdi := na.approx(hdi) , by = iso3]

# #also include data from here for past years
# #http://hdr.undp.org/en/content/table-2-human-development-index-trends-1990%E2%80%932018
# hdi_un <- read.csv('data/covars/HDI_UNDP.csv', skip = 1, sep = ",") %>%
#   mutate(iso3 = countrycode(Country, origin = "country.name", destination = "iso3c")) %>%
#   select(-c(HDI.Rank..2018., Country)) %>%
#   filter(!is.na(iso3))
# 
# hdi_un[hdi_un == ".."] <- NA
# colnames(hdi_un) <- c(1990:2018, "iso3")
# 
# hdi_un <- reshape2::melt(hdi_un, id.vars = "iso3", variable.name = "year", value.name = "hdi")
# 
# hdi <- rbind(hdi, hdi_un)
# hdi <- hdi[order(year), .(year, hdi), by = iso3]

###-----------------------------------------------------------------------------------------------------------------
## IAM (Integrated assessment modelling), use Agriculture and Land Cover variables

iam <- read.csv('data/covars/SSP_IAM_V2_201811.csv') %>%
  filter(MODEL == "AIM/CGE", SCENARIO == "SSP2-Baseline", REGION != "World",
         VARIABLE %in% c("Agricultural Production|Livestock", "Agricultural Production|Crops|Non-Energy", "Agricultural Production|Crops|Energy",
                         "Land Cover|Forest", "Land Cover|Cropland", "Land Cover|Built-up Area")) %>%
  mutate(REGION = gsub('.2','', REGION)) %>%
  select(-c(MODEL, SCENARIO, paste0("X", seq(2050, 2100, 10))))


region <- read.xlsx("data/covars/cmip6_iam_model_region_mapping.xlsx", sheet = "default_mapping") %>%
  select(ISO, R5_region) %>%
  rename(REGION = "R5_region")

#use the average of the region for all countries within the region
iam <- merge(region, iam, all.y = T, by = "REGION") %>% select(-REGION)

#check units
iam <- iam %>% select(-UNIT)

colnames(iam) <- c("iso3", "var", c(2005, 2010, 2020, 2030, 2040))

iam <- reshape2::melt(iam, id.vars = c("iso3", "var"), variable.name = "year")
iam <- reshape2::dcast(iam, iso3 + year ~ var)

iam <- iam %>% 
  rename(livestock = "Agricultural Production|Livestock", 
                      crops_nonenergy = "Agricultural Production|Crops|Non-Energy", 
                      crops_energy = "Agricultural Production|Crops|Energy",
                      forest = "Land Cover|Forest", 
                      cropland = "Land Cover|Cropland", 
                      builtup = "Land Cover|Built-up Area") %>%
  mutate(crops_prod = crops_nonenergy + crops_energy) %>%
  select(-c(crops_nonenergy, crops_energy))
  

#approax the years in between
iam <- data.table(iam)
iam <- rbind(iam, iam[, .(year = setdiff(2005:2040, c(2005, 2010, 2020, 2030, 2040)), 
                          livestock = NA, crops_prod = NA, forest = NA, cropland = NA, builtup = NA), by = .(iso3)])
iam$year <- as.numeric(as.character(iam$year))

iam <- iam[order(year), .SD, by = iso3]

iam[, livestock := na.approx(livestock) , by = iso3]
iam[, crops_prod := na.approx(crops_prod) , by = iso3]
iam[, forest := na.approx(forest) , by = iso3]
iam[, cropland := na.approx(cropland) , by = iso3]
iam[, builtup := na.approx(builtup) , by = iso3]


###-----------------------------------------------------------------------------------------------------------------
## historic SSP data

ssp_past <- read.csv('data/covars/SSP2_Vars_Past.csv') 

ssp_past <- ssp_past %>%
  select(year=Year, iso3=iso3c, GDLCODE=GDLcode, grid_gdp, 
         edu_year = EdYears, rural = Rural, urban = Urban) %>%
  mutate(grid_gdp = log(grid_gdp),
         urban_perc = urban/(urban + rural)) %>%
  filter(GDLCODE %in% gdl$GDLCODE, 
         !is.na(iso3), !is.na(GDLCODE))


#Deal with missing data
#For areas where urban percentage is NaN, set to country mean
ssp_past$urban_perc[ssp_past$iso3 == 'VUT' & is.na(ssp_past$urban_perc)] <- mean(ssp_past$urban_perc[ssp_past$iso3 == 'VUT'], na.rm=T) 
ssp_past$urban_perc[ssp_past$iso3 == 'FSM' & is.na(ssp_past$urban_perc)] <- mean(ssp_past$urban_perc[ssp_past$iso3 == 'FSM'], na.rm=T) 

#Edu Year is missing at random, looks like it there for some years for almost all countries
ssp_past <- ssp_past %>% 
  #Make NANs NA
  mutate(edu_year=ifelse(is.nan(edu_year), NA, edu_year)) %>%
  #Fill in missing years with nearest chronological year
  arrange(GDLCODE, year) %>%
  group_by(GDLCODE) %>%
  mutate(edu_year=na.locf(na.locf(edu_year, na.rm=F), na.rm=F, fromLast=T))

#Grid_GDP currently missing for countries >50 degrees north
#So fill them in with a proxy country
rich_north <- c("BEL", "CAN", "DEU", "DNK", "EST", "FIN", "FRA", "GBR", "IRL", "ISL", "NLD", "NOR", "SWE", "USA")
poor_north <- c("BLR", "LTU", "LVA", "POL", "RUS")

#Set rich countries GDP equal to rural Germany
for (code in unique(ssp_past$GDLCODE[ssp_past$iso3 %in% rich_north & is.na(ssp_past$grid_gdp)])){
  ssp_past$grid_gdp[ssp_past$GDLCODE == code] <- ssp_past$grid_gdp[ssp_past$GDLCODE == "DEUr101"]
}

#Set poor countries GDP equal to rural Hungary
for (code in unique(ssp_past$GDLCODE[ssp_past$iso3 %in% poor_north & is.na(ssp_past$grid_gdp)])){
  ssp_past$grid_gdp[ssp_past$GDLCODE == code] <- ssp_past$grid_gdp[ssp_past$GDLCODE == "HUNr101"]
}

#For all other missing GDP data (in small islands), use national mean
ssp_past <- ssp_past %>%
  group_by(iso3) %>%
  mutate(grid_gdp=replace(grid_gdp, which(is.na(grid_gdp)), mean(grid_gdp, na.rm=TRUE)))


###-----------------------------------------------------------------------------------------------------------------
## future SSP data

ssp_future <- read.csv('data/covars/SSP2_Vars_Future.csv') 

ssp_future <- ssp_future %>%
  select(year=Year, iso3=iso3c, GDLCODE=GDLcode, grid_gdp = GDP_PerCap, edu_year = mean_years_ed, 
         rural = rur_pop, urban = urb_pop) %>%
  mutate(grid_gdp = log(grid_gdp*100),
         urban_perc = urban/(urban + rural)) %>%
  filter(GDLCODE %in% gdl$GDLCODE, 
         !is.na(iso3), !is.na(GDLCODE))

#Missing data in Carribbean islands, Liechtenstein, and South Sudan
#For new, set South Sudan equal to CAR for gdp and ed
ssp_future <- ssp_future %>%
  group_by(year) %>%
  mutate(grid_gdp = replace(grid_gdp, which(iso3=='SSD'), mean(grid_gdp[iso3=='CAF'])),
         edu_year = replace(edu_year, which(iso3=='SSD'), mean(edu_year[iso3=='CAF'])))


###-----------------------------------------------------------------------------------------------------------------
## predict some of the extracted covariates with simple model

v <- c("mal_falciparum", "mal_vivax", "market_dist", "assistance", "ag_pct_gdp", "imports_percap")
data <- merge(covar_now %>% select(year, iso3, GDLCODE, v), ssp_past, by = c("year", "GDLCODE", "iso3"), all.x = T)

log.data <- data %>%
  mutate_at(vars(v), funs(log(.)))
summary(log.data)

elast <- data.frame(var = v, int = NA, e = NA)
elast$var <- as.character(elast$var)

#mal_falciparum
m_mal_falciparum <- lm(mal_falciparum ~ grid_gdp, subset(log.data, mal_falciparum != is.na(mal_falciparum) & mal_falciparum > -Inf), na.action = na.omit); summary(m_mal_falciparum)
elast$int[elast$var == "mal_falciparum"] <- m_mal_falciparum$coefficients[["(Intercept)"]]
elast$e[elast$var == "mal_falciparum"] <- m_mal_falciparum$coefficients[["grid_gdp"]]

#mal_vivax
m_mal_vivax <- lm(mal_vivax ~ grid_gdp, subset(log.data, mal_vivax != is.na(mal_vivax) & mal_vivax > -Inf), na.action = na.omit); summary(m_mal_vivax)
elast$int[elast$var == "mal_vivax"] <- m_mal_vivax$coefficients[["(Intercept)"]]
elast$e[elast$var == "mal_vivax"] <- m_mal_vivax$coefficients[["grid_gdp"]]

#market_dist
m_market_dist <- lm(market_dist ~ grid_gdp, subset(log.data, market_dist != is.na(market_dist) & market_dist > -Inf), na.action = na.omit); summary(m_market_dist)
elast$int[elast$var == "market_dist"] <- m_market_dist$coefficients[["(Intercept)"]]
elast$e[elast$var == "market_dist"] <- m_market_dist$coefficients[["grid_gdp"]]

#assistance
m_assistance <- lm(assistance ~ grid_gdp, subset(log.data, assistance != is.na(assistance) & assistance > -Inf), na.action = na.omit); summary(m_assistance)
elast$int[elast$var == "assistance"] <- m_assistance$coefficients[["(Intercept)"]]
elast$e[elast$var == "assistance"] <- m_assistance$coefficients[["grid_gdp"]]

#ag_pct_gdp
m_ag_pct_gdp <- lm(ag_pct_gdp ~ grid_gdp, subset(log.data, ag_pct_gdp != is.na(ag_pct_gdp) & ag_pct_gdp > -Inf), na.action = na.omit); summary(m_ag_pct_gdp)
elast$int[elast$var == "ag_pct_gdp"] <- m_ag_pct_gdp$coefficients[["(Intercept)"]]
elast$e[elast$var == "ag_pct_gdp"] <- m_ag_pct_gdp$coefficients[["grid_gdp"]]

#imports_percap
m_imports_percap <- lm(imports_percap ~ grid_gdp, subset(log.data, imports_percap != is.na(imports_percap) & imports_percap > -Inf), na.action = na.omit); summary(m_imports_percap)
elast$int[elast$var == "imports_percap"] <- m_imports_percap$coefficients[["(Intercept)"]]
elast$e[elast$var == "imports_percap"] <- m_imports_percap$coefficients[["grid_gdp"]]

covar_trend <- ssp_future %>%
  select(year, iso3, GDLCODE, grid_gdp)

covar_trend <- data.frame(covar_trend, matrix(nrow = nrow(covar_trend), ncol = 6))
names(covar_trend)[5:10] <- v

covar_trend$mal_falciparum <- elast$int[elast$var == "mal_falciparum"] + elast$e[elast$var == "mal_falciparum"]*covar_trend$grid_gdp
covar_trend$mal_vivax <- elast$int[elast$var == "mal_vivax"] + elast$e[elast$var == "mal_vivax"]*covar_trend$grid_gdp
covar_trend$market_dist <- elast$int[elast$var == "market_dist"] + elast$e[elast$var == "market_dist"]*covar_trend$grid_gdp
covar_trend$assistance <- elast$int[elast$var == "assistance"] + elast$e[elast$var == "assistance"]*covar_trend$grid_gdp
covar_trend$ag_pct_gdp <- elast$int[elast$var == "ag_pct_gdp"] + elast$e[elast$var == "ag_pct_gdp"]*covar_trend$grid_gdp
covar_trend$imports_percap <- elast$int[elast$var == "imports_percap"] + elast$e[elast$var == "imports_percap"]*covar_trend$grid_gdp

covar_trend[,4:10] <- exp(covar_trend[,4:10])
covar_trend <- covar_trend %>% select(year, iso3, GDLCODE, v)
covar_trend <- rbind(covar_trend, covar_now %>% select(year, iso3, GDLCODE, v))


covar_future <- Reduce(function(x, y){merge(x, y, all.x = T, all.y = F)}, list(rbind(ssp_past, ssp_future), gini, hdi, iam, covar_trend)) 
covar_future <- covar_future %>% filter(year %in% 2014:2030)






cache('covar_now')
cache('covar_future')

